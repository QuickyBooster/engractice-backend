package main

import (
	"context"
	_ "engractice/docs" // docs is generated by Swag CLI, you have to import it.
	"engractice/internal/controllers"
	"engractice/internal/database"
	"engractice/internal/server"
	"engractice/internal/services"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	_ "github.com/joho/godotenv/autoload"
)

func gracefulShutdown(fiberServer *server.FiberServer, done chan bool) {
	// Create context that listens for the interrupt signal from the OS.
	ctx, stop := signal.NotifyContext(context.Background(), syscall.SIGINT, syscall.SIGTERM)
	defer stop()

	// Listen for the interrupt signal.
	<-ctx.Done()

	log.Println("shutting down gracefully, press Ctrl+C again to force")
	stop() // Allow Ctrl+C to force shutdown

	// The context is used to inform the server it has 5 seconds to finish
	// the request it is currently handling
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	if err := fiberServer.ShutdownWithContext(ctx); err != nil {
		log.Printf("Server forced to shutdown with error: %v", err)
	}

	log.Println("Server exiting")

	// Notify the main goroutine that the shutdown is complete
	done <- true
}

// @title engractice APIs
// @version 1.0
// @description This is engractice APIs.
// @contact.name Booster
// @contact.email quicklybooster.vh@gmail.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @host localhost:8080
// @BasePath /

func main() {
	dbName := os.Getenv("BLUEPRINT_DB_DATABASE")

	server := server.New()
	// db
	db := database.New(dbName)

	// services
	vocabularyService := services.NewVocabularyService(&db)
	testService := services.NewTestService(&db,dbName)

	// Controllers
	vocabularyController := controllers.NewVocabularyController(vocabularyService)
	testController := controllers.NewTestController(testService)

	// register controller to server
	server.RegisterFiberRoutes(vocabularyController, testController)

	// Create a done channel to signal when the shutdown is complete
	done := make(chan bool, 1)

	go func() {
		port, _ := strconv.Atoi(os.Getenv("PORT"))
		err := server.Listen(fmt.Sprintf(":%d", port))
		if err != nil {
			panic(fmt.Sprintf("http server error: %s", err))
		}
	}()

	// Run graceful shutdown in a separate goroutine
	go gracefulShutdown(server, done)

	// Wait for the graceful shutdown to complete
	<-done
	log.Println("Graceful shutdown complete.")
}
